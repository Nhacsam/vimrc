snippet component
// @flow
import * as React from 'react';

type Props = {
};

class ${1:Component} extends React.PureComponent<Props> {
  render() {
    return (
      <div>
      </div>
    );
  }
}
export default $1;
endsnippet

snippet actions
export type ${1:Entity} = {
};

type FetchAction = {
  type: 'FETCH_${2:ENTITY}',
};

type FetchSuccessAction = {
  type: 'FETCH_$2_SUCCESS',
  payload: number[],
  meta: {
    entities: {
      [number]: $1,
    },
  },
};

type FetchErrorAction = {
  type: 'FETCH_$2_ERROR',
  payload: Error,
  error: boolean,
};

type Action = FetchAction | FetchSuccessAction | FetchErrorAction;

const fetch$1s = (): FetchAction => ({
  type: 'FETCH_$2',
});

const fetch$1sSuccess = (normalizedResults: any): FetchSuccessAction => ({
  type: 'FETCH_$2_SUCCESS',
  payload: normalizedResults.results,
  meta: {
    entities: normalizedResults.entities,
  },
});

const fetch$1sError = (error: Error): FetchErrorAction => ({
  type: 'FETCH_$2_ERROR',
  payload: error,
  error: true,
});
endsnippet

snippet reducer
type State = {};

const initialState = {};

export default function reducer(state: State = initialState, action: Action): State {
  switch (action.type) {
    default:
      return state;
  }
}
endsnippet


